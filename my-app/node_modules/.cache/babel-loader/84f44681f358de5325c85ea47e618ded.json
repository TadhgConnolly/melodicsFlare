{"ast":null,"code":"export const testAudioNodeDisconnectMethodSupport = (nativeAudioContext, nativeAudioWorkletNodeConstructor) => {\n  return new Promise(resolve => {\n    /*\n     * This bug existed in Safari up until v14.0.2. Since AudioWorklets were not supported in Safari until v14.1 the presence of the\n     * constructor for an AudioWorkletNode can be used here to skip the test.\n     */\n    if (nativeAudioWorkletNodeConstructor !== null) {\n      resolve(true);\n    } else {\n      const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1); // tslint:disable-line deprecation\n\n      const dummy = nativeAudioContext.createGain(); // Bug #95: Safari does not play one sample buffers.\n\n      const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n      const channelData = ones.getChannelData(0);\n      channelData[0] = 1;\n      channelData[1] = 1;\n      const source = nativeAudioContext.createBufferSource();\n      source.buffer = ones;\n      source.loop = true;\n      source.connect(analyzer).connect(nativeAudioContext.destination);\n      source.connect(dummy);\n      source.disconnect(dummy); // tslint:disable-next-line:deprecation\n\n      analyzer.onaudioprocess = event => {\n        const chnnlDt = event.inputBuffer.getChannelData(0); // tslint:disable-line deprecation\n\n        if (Array.prototype.some.call(chnnlDt, sample => sample === 1)) {\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n\n        source.stop();\n        analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n\n        source.disconnect(analyzer);\n        analyzer.disconnect(nativeAudioContext.destination);\n      };\n\n      source.start();\n    }\n  });\n};","map":{"version":3,"sources":["../../../src/helpers/test-audio-node-disconnect-method-support.ts"],"names":[],"mappings":"AAEA,OAAO,MAAM,oCAAoC,GAAG,CAChD,kBADgD,EAEhD,iCAFgD,KAG9B;AAClB,SAAO,IAAI,OAAJ,CAAa,OAAD,IAAY;AAC3B;;;AAGG;AACH,QAAI,iCAAiC,KAAK,IAA1C,EAAgD;AAC5C,MAAA,OAAO,CAAC,IAAD,CAAP;AACH,KAFD,MAEO;AACH,YAAM,QAAQ,GAAG,kBAAkB,CAAC,qBAAnB,CAAyC,GAAzC,EAA8C,CAA9C,EAAiD,CAAjD,CAAjB,CADG,CACmE;;AACtE,YAAM,KAAK,GAAG,kBAAkB,CAAC,UAAnB,EAAd,CAFG,CAGH;;AACA,YAAM,IAAI,GAAG,kBAAkB,CAAC,YAAnB,CAAgC,CAAhC,EAAmC,CAAnC,EAAsC,KAAtC,CAAb;AACA,YAAM,WAAW,GAAG,IAAI,CAAC,cAAL,CAAoB,CAApB,CAApB;AAEA,MAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB;AACA,MAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB;AAEA,YAAM,MAAM,GAAG,kBAAkB,CAAC,kBAAnB,EAAf;AAEA,MAAA,MAAM,CAAC,MAAP,GAAgB,IAAhB;AACA,MAAA,MAAM,CAAC,IAAP,GAAc,IAAd;AAEA,MAAA,MAAM,CAAC,OAAP,CAAe,QAAf,EAAyB,OAAzB,CAAiC,kBAAkB,CAAC,WAApD;AACA,MAAA,MAAM,CAAC,OAAP,CAAe,KAAf;AACA,MAAA,MAAM,CAAC,UAAP,CAAkB,KAAlB,EAjBG,CAmBH;;AACA,MAAA,QAAQ,CAAC,cAAT,GAA2B,KAAD,IAAU;AAChC,cAAM,OAAO,GAAG,KAAK,CAAC,WAAN,CAAkB,cAAlB,CAAiC,CAAjC,CAAhB,CADgC,CACqB;;AAErD,YAAI,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB,IAArB,CAA0B,OAA1B,EAAoC,MAAD,IAAoB,MAAM,KAAK,CAAlE,CAAJ,EAA0E;AACtE,UAAA,OAAO,CAAC,IAAD,CAAP;AACH,SAFD,MAEO;AACH,UAAA,OAAO,CAAC,KAAD,CAAP;AACH;;AAED,QAAA,MAAM,CAAC,IAAP;AAEA,QAAA,QAAQ,CAAC,cAAT,GAA0B,IAA1B,CAXgC,CAWA;;AAEhC,QAAA,MAAM,CAAC,UAAP,CAAkB,QAAlB;AACA,QAAA,QAAQ,CAAC,UAAT,CAAoB,kBAAkB,CAAC,WAAvC;AACH,OAfD;;AAiBA,MAAA,MAAM,CAAC,KAAP;AACH;AACJ,GA9CM,CAAP;AA+CH,CAnDM","sourceRoot":"","sourcesContent":["export const testAudioNodeDisconnectMethodSupport = (nativeAudioContext, nativeAudioWorkletNodeConstructor) => {\n    return new Promise((resolve) => {\n        /*\n         * This bug existed in Safari up until v14.0.2. Since AudioWorklets were not supported in Safari until v14.1 the presence of the\n         * constructor for an AudioWorkletNode can be used here to skip the test.\n         */\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            resolve(true);\n        }\n        else {\n            const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1); // tslint:disable-line deprecation\n            const dummy = nativeAudioContext.createGain();\n            // Bug #95: Safari does not play one sample buffers.\n            const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n            const channelData = ones.getChannelData(0);\n            channelData[0] = 1;\n            channelData[1] = 1;\n            const source = nativeAudioContext.createBufferSource();\n            source.buffer = ones;\n            source.loop = true;\n            source.connect(analyzer).connect(nativeAudioContext.destination);\n            source.connect(dummy);\n            source.disconnect(dummy);\n            // tslint:disable-next-line:deprecation\n            analyzer.onaudioprocess = (event) => {\n                const chnnlDt = event.inputBuffer.getChannelData(0); // tslint:disable-line deprecation\n                if (Array.prototype.some.call(chnnlDt, (sample) => sample === 1)) {\n                    resolve(true);\n                }\n                else {\n                    resolve(false);\n                }\n                source.stop();\n                analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n                source.disconnect(analyzer);\n                analyzer.disconnect(nativeAudioContext.destination);\n            };\n            source.start();\n        }\n    });\n};\n//# sourceMappingURL=test-audio-node-disconnect-method-support.js.map"]},"metadata":{},"sourceType":"module"}